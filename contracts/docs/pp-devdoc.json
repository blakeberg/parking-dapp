
======= ParkingPlaces =======
Developer Documentation
{
   "author" : "<bjoern.lakeberg@technik-emden.de>",
   "methods" : {
      "AddPlace(bytes32,int16[2][2],address)" : {
         "details" : "An event will be triggered to notify the watchers.",
         "params" : {
            "location" : "The array with new coordinates of the place.",
            "name" : "The unique name of the place.",
            "owner" : "The address for owner of the place."
         }
      },
      "AddSlots(bytes32,uint256)" : {
         "details" : "An event will be triggered to notify the watchers.",
         "params" : {
            "name" : "The amount of slots adding to the place."
         }
      },
      "ChangeController(address)" : {
         "params" : {
            "newController" : "The address of the new owner."
         }
      },
      "DisablePlace(bytes32)" : {
         "details" : "An event will be triggered to notify the watchers.",
         "params" : {
            "name" : "The unique name of the place."
         }
      },
      "EnablePlace(bytes32)" : {
         "details" : "An event will be triggered to notify the watchers.",
         "params" : {
            "name" : "The unique name of the place."
         }
      },
      "ReserveSlot(bytes32,uint256)" : {
         "details" : "An event will be triggered to notify the watchers.",
         "params" : {
            "name" : "The unique name of the place.",
            "reservedBlock" : "The block number until to reserve."
         }
      },
      "UpdatePlaceLocation(bytes32,int24[2][2])" : {
         "details" : "An event will be triggered to notify the watchers.",
         "params" : {
            "name" : "The name of the place.",
            "newLocation" : "The array with new coordinates of the place."
         }
      },
      "close()" : {
         "details" : "Removes contracts bytecode and storage from current block to future."
      }
   },
   "title" : "Contract for parking places and slot reservation."
}

